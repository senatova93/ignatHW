{"version":3,"sources":["HomeWork1/TelegrammCloud.module.css","HomeWork1/Name.tsx","HomeWork1/Text.tsx","HomeWork1/Time.tsx","HomeWork1/TelegrammCloud.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Name","props","className","s","nameMessage","name","Text","mainMessage","text","Time","time","TelegrammCloud","message","cloud","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,gCAAgC,MAAQ,8BAA8B,YAAc,oCAAoC,YAAc,oCAAoC,KAAO,+B,gLCe9LC,MARf,SAAcC,GACV,OACI,yBAAKC,UAAWC,IAAEC,aACbH,EAAMI,OCKJC,MARf,SAAcL,GACV,OACI,yBAAKC,UAAWC,IAAEI,aACbN,EAAMO,OCKJC,MARf,SAAcR,GACV,OACI,yBAAKC,UAAWC,IAAEO,MACbT,EAAMS,OCSJC,MAbf,WACI,OACI,yBAAKT,UAAWC,IAAES,SACd,yBAAKV,UAAWC,IAAEU,OAEd,kBAAC,EAAD,CAAMR,KAAK,WACX,kBAAC,EAAD,CAAMG,KAAK,gDACX,kBAAC,EAAD,CAAME,KAAK,aCCZI,MATf,WACI,OACI,yBAAKZ,UAAU,OAAf,WAEI,kBAAC,EAAD,QCEQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpB,c","file":"static/js/main.0f3e7c4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"TelegrammCloud_message__EAwCA\",\"cloud\":\"TelegrammCloud_cloud__2uWFU\",\"nameMessage\":\"TelegrammCloud_nameMessage__DVIaJ\",\"mainMessage\":\"TelegrammCloud_mainMessage__2ScXH\",\"time\":\"TelegrammCloud_time__3jJIQ\"};","import React from 'react';\nimport '../App.css';\nimport s from './TelegrammCloud.module.css'\n\ntype PropsType = {\n    name: string\n}\n\nfunction Name(props: PropsType) {\n    return (\n        <div className={s.nameMessage}>\n            {props.name}\n        </div>\n    );\n}\n\nexport default Name;\n","import React from 'react';\nimport '../App.css';\nimport s from './TelegrammCloud.module.css'\n\ntype PropsType = {\n    text: string\n}\n\nfunction Text(props: PropsType) {\n    return (\n        <div className={s.mainMessage}>\n            {props.text}\n        </div>\n    );\n}\n\nexport default Text;\n","import React from 'react';\nimport '../App.css';\nimport s from './TelegrammCloud.module.css'\n\ntype PropsType = {\n    time: string\n}\n\nfunction Time(props: PropsType) {\n    return (\n        <div className={s.time}>\n            {props.time}\n        </div>\n    );\n}\n\nexport default Time;\n","import React from 'react';\nimport '../App.css';\nimport s from '../HomeWork1/TelegrammCloud.module.css'\nimport Name from '../HomeWork1/Name'\nimport Text from '../HomeWork1/Text'\nimport Time from '../HomeWork1/Time'\n\nfunction TelegrammCloud() {\n    return (\n        <div className={s.message}>\n            <div className={s.cloud}>\n\n                <Name name=\"Nastya\"/>\n                <Text text=\"Я люблю React\"/>\n                <Time time=\"22.00\"/>\n            </div>\n        </div>\n    );\n}\n\nexport default TelegrammCloud;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport TelegrammCloud from \"./HomeWork1/TelegrammCloud\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            HOMEWORK\n            <TelegrammCloud/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}